<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++变量和基本类型</title>
    <url>/2022/01/04/C++%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="C-变量和基本类型"><a href="#C-变量和基本类型" class="headerlink" title="C++变量和基本类型"></a>C++变量和基本类型</h2><h4 id="1-重定向问题"><a href="#1-重定向问题" class="headerlink" title="1. 重定向问题"></a>1. 重定向问题</h4><ul>
<li><code>C++primer</code>中提到可以使用<code>&gt;</code>和<code>&lt;</code>实现文件重定向，但是实测在<code>powershell</code>中是无法使用的。但可以使用其他命令代替，具体内容可参考如下链接。</li>
<li><a href="https://www.cnblogs.com/yejiaxing-01/p/12570763.html">Windows下的重定向 - 叶家星 - 博客园 (cnblogs.com)</a></li>
<li><a href="https://blog.csdn.net/fjjaylz/article/details/86663013">(55条消息) Windows PowerShell的“管道”以及对可执行文件的文件重定向_fjjaylz的博客-CSDN博客_powershell 文件重定向</a></li>
</ul>
<h4 id="2-初始化与赋值"><a href="#2-初始化与赋值" class="headerlink" title="2. 初始化与赋值"></a>2. 初始化与赋值</h4><ul>
<li>初始化不是赋值</li>
<li>初始化是创建变量时赋予一个初始值。</li>
<li>赋值是把对象的当前值擦除，用一个新值代替。</li>
</ul>
<h4 id="3-列表初始化"><a href="#3-列表初始化" class="headerlink" title="3. 列表初始化"></a>3. 列表初始化</h4><ul>
<li><p>当列表初始化应用于内置类型，且此时存在丢失信息的风险时，编译器会报错，注意与普通的初始化过程的对比</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">long</span> <span class="hljs-keyword">double</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">int</span> b&#123;a&#125;,c = &#123;a&#125;;		<span class="hljs-comment">//报错</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">d</span><span class="hljs-params">(a)</span>,e </span>= a;			<span class="hljs-comment">//正确</span><br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211231115931840.png" alt="image-20211231115931840"></p>
</li>
</ul>
<h4 id="4-默认初始化"><a href="#4-默认初始化" class="headerlink" title="4. 默认初始化"></a>4. 默认初始化</h4><ul>
<li><p>变量定义时未指定初值则会进行默认初始化。</p>
</li>
<li><p>内置类型（包括指针）</p>
<ul>
<li><p>定义于函数体外初始化为0</p>
</li>
<li><p>定义于函数体内不会初始化，为未定义，无法预知结果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">double</span> a;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">double</span> b;<br>    std::cout &lt;&lt; a &lt;&lt; std::endl;			<span class="hljs-comment">//函数外，初始化为0</span><br>    std::cout &lt;&lt; b &lt;&lt; std::endl;			<span class="hljs-comment">//函数内，编译器等运行环境决定</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211231121209894.png" alt="image-20211231121209894" style="zoom:200%;" /></li>
</ul>
</li>
<li><p>类类型由类自己决定</p>
</li>
</ul>
<h4 id="5-声明与定义"><a href="#5-声明与定义" class="headerlink" title="5. 声明与定义"></a>5. 声明与定义</h4><ul>
<li><p>声明：规定变量的类型和名字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> i;		<span class="hljs-comment">//初始化后成为定义，且不能在函数体内初始化</span><br><span class="hljs-comment">//变量可以声明多次，但只能定义一次</span><br><span class="hljs-comment">//例</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> i = <span class="hljs-number">10</span>;	<span class="hljs-comment">//定义，正确</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">int</span> i;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    i = <span class="hljs-number">10</span>;			<span class="hljs-comment">//错误</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>定义：规定变量的类型、名字，并申请存储空间，还可能赋初值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i;<br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h4><ul>
<li><p>引用必须初始化，且无法进行赋值，即初始化之后无法重新绑定到其他对象上。</p>
</li>
<li><p>引用不是对象，它只是对象的别名，引用的类型要和与之绑定的对象严格匹配。</p>
</li>
<li><p>字面值和表达式的计算结果不是对象，因此没有相应的引用。也可理解为，引用是左值引用，即引用的对象必须是一个左值。</p>
</li>
<li><p>引用必须绑定在对象上，不能定义引用的引用；引用不是对象，因此也没有引用的指针；指针是对象，因此有指针的引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;iostream&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">int</span> *b = &amp;a;<br>    <span class="hljs-keyword">int</span> *&amp;c = b;					<span class="hljs-comment">//指针的引用，注意类型的匹配</span><br>    std::cout &lt;&lt; *c &lt;&lt; std::endl;	<span class="hljs-comment">//输出10</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>前述引用类型和与之绑定的对象类型要严格匹配。但是有两个例外</p>
<ul>
<li><p>初始化常量引用时，允许任意表达式作为初始值，只要该表达式结果能够转换为引用的类型即可。允许常量引用绑定非常亮的对象、字面值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;b = a;			<span class="hljs-comment">//正确，非常量可以转换为常量</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;c = <span class="hljs-number">1</span>;			<span class="hljs-comment">//正确，字面值常量可以转换为常量对象</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;d = b * <span class="hljs-number">2</span>;		<span class="hljs-comment">//正确，运算结果可转换</span><br><span class="hljs-keyword">int</span> &amp;e = b * <span class="hljs-number">2</span>;				<span class="hljs-comment">//错误，不是常量引用，不能引用字面值</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="7-指针"><a href="#7-指针" class="headerlink" title="7. 指针"></a>7. 指针</h4><ul>
<li><p>指针是对象，指针的类型与它所指向的类型必须匹配。</p>
</li>
<li><p>使用字面值<code>nullptr</code>初始化指针得到空指针，<code>nullptr</code>可以转换为任何指针类型。</p>
</li>
<li><p><code>void*</code>指针可以指向任意类型的对象，不能直接操作<code>void*</code>指针指向的对象，因为无法确认对象的类型。</p>
</li>
<li><p>使用<code>*</code>，<code>&amp;</code>等定义变量时，二者只是类型修饰符，是声明符的一部分，只作用于其后所接的第一个变量名。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1024</span>,*p = &amp;i,&amp;r = i;		<span class="hljs-comment">//i为int型的数，p是int型指针，r是int型引用</span><br><span class="hljs-keyword">int</span> *p1,p2;							<span class="hljs-comment">//p1为int型指针，p2为int型变量</span><br></code></pre></td></tr></table></figure></li>
<li><p>指针类型和所指对象类型不匹配的两种情况</p>
<ul>
<li><p>允许指向常量的指针指向一个非常量对象（类似常量引用）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *b = &amp;a;				<span class="hljs-comment">//正确,但是不能用b改变a的值</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="8-const限定符"><a href="#8-const限定符" class="headerlink" title="8. const限定符"></a>8. const限定符</h4><ul>
<li><p><code>const</code>对象一经创建就无法修改，因此必须进行初始化。</p>
</li>
<li><p>在<code>const</code>类型的对象上进行的操作不能改变其内容，否则会出错。</p>
</li>
<li><p>默认情况下，<code>const</code>对象仅在一个文件中有效，因为<code>const</code>对象在编译时会被替换为其值，编译器必须知道它的初始值，因此每个文件中都必须有其定义。并且当多个文件中出现同名的<code>const</code>变量时，等同于在不同文件中定义了独立的变量。</p>
</li>
<li><p>想要在文件之间共享<code>const</code>变量，可以使用<code>extern</code>关键字进行声明和定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//a.cpp中定义const变量</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bufSize = <span class="hljs-built_in">fcn</span>();<br><span class="hljs-comment">//b.h头文件中声明，即可直接使用</span><br><span class="hljs-keyword">extern</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bufSize;	<span class="hljs-comment">//与a.cpp中的是同一个变量</span><br></code></pre></td></tr></table></figure></li>
<li><p>常量引用，即把引用绑定到常量对象上。此时显然不能对被引用的常量对象进行修改操作。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;b = a;		<span class="hljs-comment">//正确</span><br><span class="hljs-keyword">int</span> &amp;c = a;				<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure></li>
<li><p>对<code>const</code>的引用可以引用一个非<code>const</code>对象，此时无法通过引用修改对象，但是可以通过其他方式进行修改</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;				<span class="hljs-comment">//i是可以修改的</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;a = i;		<span class="hljs-comment">//不能通过a修改i对象</span><br></code></pre></td></tr></table></figure></li>
<li><p>指向常量的指针和常量指针</p>
<ul>
<li><p>指向常量的指针，不能用于修改其所指对象的值。对象不是常量时，其值可以通过其他方式修改。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *b = &amp;a;		<span class="hljs-comment">//此处即为指向常量的指针，此时不能通过b修改a的值</span><br></code></pre></td></tr></table></figure></li>
<li><p>常量指针。指针是对象，可以把自身定为常量。常量指针要满足普通常量的要求（初始化等特性）。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> b = &amp;a;		<span class="hljs-comment">//此时b为常量指针，b的内容无法改变，但是a可以改变</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> c = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> d = &amp;c;	<span class="hljs-comment">//指向常量对象的常量指针</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>顶层<code>const</code>和底层<code>const</code>。顶层<code>const</code>表示指针本身是常量，底层<code>const</code>表示指针所指对象是常量。执行对象的拷贝操作时，拷入和拷出的对象必须具有相同的底层<code>const</code>资格，或者两个对象的数据类型可以相互转换。非常量可以转换为常量。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *<span class="hljs-keyword">const</span> b = &amp;a;		<span class="hljs-comment">//既是底层const又是顶层const</span><br><span class="hljs-keyword">int</span> c = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>* d = &amp;a;				<span class="hljs-comment">//底层const</span><br><span class="hljs-keyword">int</span> *e = b;						<span class="hljs-comment">//错误，b包含底层const定义，而c没有</span><br>d = b;							<span class="hljs-comment">//正确，b,c都包含底层const定义</span><br>d = &amp;c;							<span class="hljs-comment">//正确，int*可以转换为const int *</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-constexpr和常量表达式"><a href="#9-constexpr和常量表达式" class="headerlink" title="9. constexpr和常量表达式"></a>9. constexpr和常量表达式</h4><ul>
<li><p>常量表达式是指值不会改变并且在编译过程中就可以得到计算结果的表达式。如：字面值、用常量表达式初始化的<code>const</code>对象。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;					<span class="hljs-comment">//a不是常量表达式</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> b = <span class="hljs-built_in">get_size</span>();	<span class="hljs-comment">//b不是常量表达式，编译时无法确定</span><br></code></pre></td></tr></table></figure></li>
<li><p><code>constexpr</code>用于声明常量表达式变量，声明之后，编译器就会在编译时验证该变量是否为常量表达式。声明为<code>constexpr</code>的变量一定是常量，并且必须用常量表达式初始化。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;		<span class="hljs-comment">//1是常量表达式</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> b = <span class="hljs-built_in">size</span>();	<span class="hljs-comment">//此时size需要是一个constexpr函数</span><br></code></pre></td></tr></table></figure></li>
<li><p>声明<code>constexpr</code>时的类型必须是字面值类型。字面值类型包括<code>算数类型、引用、指针</code>。</p>
</li>
<li><p><code>constexpr</code>指针</p>
<ul>
<li><p><code>constexpr</code>指针初始值必须是<code>nullptr</code>或者<code>0</code>，或者是存储于固定地址的对象。函数体内的变量存储于非固定地址，定义于所有函数体制外的对象存储于固定地址。</p>
</li>
<li><p><code>constexpr</code>指针中<code>constexpr</code>限定符只对指针有效，与指针所指对象无关。使用<code>constexpr</code>定义变量相当于顶层<code>const</code>，定义指针相当于常量指针。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *a = <span class="hljs-literal">nullptr</span>;		<span class="hljs-comment">//指向常量的指针</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">int</span> *b = <span class="hljs-literal">nullptr</span>;	<span class="hljs-comment">//常量指针</span><br><span class="hljs-keyword">int</span> p = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span>*c = &amp;p;	<span class="hljs-comment">//指向常量的常量指针,p可以不是常量</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="10-类型别名"><a href="#10-类型别名" class="headerlink" title="10. 类型别名"></a>10. 类型别名</h4><ul>
<li><p>两种：<code>typedef</code>和<code>using(别名声明)</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">//声明</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> a;					<span class="hljs-comment">//a是int的同义词</span><br><span class="hljs-keyword">typedef</span> a b,*c;					<span class="hljs-comment">//b是int的同义词，c是int*的同义词，*为类型修饰，表									  示是指针类型</span><br><span class="hljs-comment">//使用 出现原类型的地方直接使用别名代替即可</span><br><br><span class="hljs-comment">//声明</span><br><span class="hljs-keyword">using</span> a = <span class="hljs-keyword">int</span>;					<span class="hljs-comment">//a是int的同义词</span><br><span class="hljs-comment">//使用</span><br>a b = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure></li>
<li><p>注意类型别名的理解</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">char</span> *ptr;<br><span class="hljs-keyword">const</span> ptr a = <span class="hljs-number">0</span>;			<span class="hljs-comment">//a是常量指针，指向char类型的对象</span><br><span class="hljs-keyword">const</span> ptr *b;				<span class="hljs-comment">//ps是一个指针，指向对象是指向char的常量指针</span><br><span class="hljs-comment">//ptr是整体，表示指向char的指针，此时不能直接将char*还原到语句中来理解。</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="11-auto类型说明符"><a href="#11-auto类型说明符" class="headerlink" title="11. auto类型说明符"></a>11. auto类型说明符</h4><ul>
<li><p><code>auto</code>由编译器分析表达式确定类型。因此<code>auto</code>定义的变量必须具有初始值，否则编译器无法分析。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> a = b + c;			<span class="hljs-comment">//根据b和c的类型确定a的类型</span><br></code></pre></td></tr></table></figure></li>
<li><p>当引用类型作为<code>auto</code>的初始值时，编译器会将引用对象的类型作为<code>auto</code>的类型。</p>
</li>
<li><p><code>auto</code>会忽略顶层<code>const</code>，保留底层<code>const</code>。希望<code>auto</code>是顶层<code>const</code>，要明确指出。<code>auto</code>为引用类型时，引用的相应规则仍旧适用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> ci = i,&amp;cr = ci;<br><span class="hljs-keyword">auto</span> b = ci;		<span class="hljs-comment">//int</span><br><span class="hljs-keyword">auto</span> c = cr;		<span class="hljs-comment">//cr是ci的别名，因此还是int</span><br><span class="hljs-keyword">auto</span> d = &amp;i;		<span class="hljs-comment">//int</span><br><span class="hljs-keyword">auto</span> e = &amp;ci;		<span class="hljs-comment">//ci为常量，&amp;ci表示指向常量的指针的值(底层const)，const int</span><br><span class="hljs-keyword">auto</span> &amp;g = ci;		<span class="hljs-comment">//const int，整形常量引用</span><br><span class="hljs-keyword">auto</span> &amp;h = <span class="hljs-number">42</span>;		<span class="hljs-comment">//错误</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> &amp;j = <span class="hljs-number">42</span>;	<span class="hljs-comment">//正确，常量引用，const int</span><br><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">auto</span> f = ci;		<span class="hljs-comment">//明确指出，ci是int，f即为const int</span><br></code></pre></td></tr></table></figure></li>
<li><p>使用<code>auto</code>一条语句声明多个变量时，因为一条声明语句只能有一个基本数据类型，因此该语句中所有变量的类型必须一致。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">auto</span> a = <span class="hljs-number">0</span>,b = <span class="hljs-number">3.14</span>;		<span class="hljs-comment">//错误，a和b的类型不一致</span><br><span class="hljs-keyword">auto</span> &amp;m = ci,*p = &amp;ci;		<span class="hljs-comment">//正确，m为常量引用，p为指向常量的指针</span><br><span class="hljs-keyword">auto</span> &amp;n = i,*p2 = &amp;ci;		<span class="hljs-comment">//错误，n为int，p2为const int</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="12-decltype类型指示符"><a href="#12-decltype类型指示符" class="headerlink" title="12. decltype类型指示符"></a>12. decltype类型指示符</h4><ul>
<li><p>用于希望从表达式类型推断要定义的变量类型但是不想用该表达式的值初始化的情形。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">decltype</span>(<span class="hljs-built_in">f</span>()) sum = x;			<span class="hljs-comment">//f的返回类型即为sum的类型</span><br><span class="hljs-comment">//编译器不会实际调用函数f，只会获取f的返回值的类型作为sum的类型</span><br></code></pre></td></tr></table></figure></li>
<li><p>如果<code>decltype</code>使用的表达式是一个变量，则会返回变量的类型，包括顶层<code>const</code>和引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>,&amp;b = a;<br><span class="hljs-keyword">decltype</span>(a) x = <span class="hljs-number">0</span>;			<span class="hljs-comment">//const int</span><br><span class="hljs-keyword">decltype</span>(b) y = x;			<span class="hljs-comment">//const int &amp;</span><br></code></pre></td></tr></table></figure></li>
<li><p>如果<code>decltype</code>使用的表达式不是一个变量，则会返回表达式结果对应的类型。当表达式的结果对象能作为一条赋值语句的左值时，一般返回引用类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;*p = &amp;i,&amp;r = i;<br><span class="hljs-keyword">decltype</span>(r+<span class="hljs-number">0</span>) b;	<span class="hljs-comment">//r是引用类型，直接替换为i即1，相加之后还是整形，因此b是int</span><br><span class="hljs-keyword">decltype</span>(*p) c;		<span class="hljs-comment">//*p是一个可赋值的左值，返回引用类型，即int&amp;，此时要初始化</span><br></code></pre></td></tr></table></figure></li>
<li><p>注意。对于<code>decltype</code>所用表达式，如果变量名加上额外的一对或多对括号，则编译器会将其当做表达式。并且是一种可以作为赋值语句左值的特殊表达式，因此会返回引用类型。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">decltype</span>((i)) a;		<span class="hljs-comment">//int &amp;，必须初始化</span><br><span class="hljs-keyword">decltype</span>(i) b;			<span class="hljs-comment">//int</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="13-自定义数据类型"><a href="#13-自定义数据类型" class="headerlink" title="13. 自定义数据类型"></a>13. 自定义数据类型</h4><ul>
<li>类内数据成员可以进行显式初始化，如果没有，则会被默认初始化。</li>
<li>类通常被定义在头文件中，而且类所在头文件的名字应该与类的名字一样。</li>
<li>头文件通常包含只能定义一次的实体，如<code>类、const、constexpr变量</code>，还包含用到的其他头文件</li>
</ul>
<h4 id="14-头文件保护预处理"><a href="#14-头文件保护预处理" class="headerlink" title="14. 头文件保护预处理"></a>14. 头文件保护预处理</h4><ul>
<li><p><code>#define</code>把一个名字设定为预处理变量，设定后表示此变量已定义</p>
</li>
<li><p><code>#ifdef</code>如果预处理变量已经定义，则执行此后的程序，直到<code>#endif</code></p>
</li>
<li><p><code>#ifndef</code>如果预处理变量没有定义，则执行此后的程序，直到<code>#endif</code></p>
</li>
<li><p>用预处理功能防止头文件重复包含.</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//在头文件中加入如下预处理代码，可防止此头文件被多次引入</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SALES_DATA_H		<span class="hljs-comment">//此时未定义，执行之后的程序</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SALES_DATA_H		<span class="hljs-comment">//定义，预处理变量名一般全部大写</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string&gt;</span>			</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Sales_data</span>&#123;</span>			<br>    std::string a;<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><span class="hljs-comment">//之后如果再一次包含此头文件，则ifndef会为假，之后到endif的部分会被直接忽略</span><br></code></pre></td></tr></table></figure></li>
</ul>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li>本文内容主要是<code>C++ primer</code>第二章内容的总结</li>
</ul>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode846-一手顺子</title>
    <url>/2022/01/03/Leetcode%E5%88%B7%E9%A2%98846-%E4%B8%80%E6%89%8B%E9%A1%BA%E5%AD%90/</url>
    <content><![CDATA[<h2 id="Leetcode846——一手顺子"><a href="#Leetcode846——一手顺子" class="headerlink" title="Leetcode846——一手顺子"></a>Leetcode846——一手顺子</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220103104944847.png" alt="image-20220103104944847"></p>
<h4 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h4>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>刷题</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上Bochs的安装和配置</title>
    <url>/2022/01/01/Linux%E4%B8%8ABochs%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Linux上Bochs的安装和配置"><a href="#Linux上Bochs的安装和配置" class="headerlink" title="Linux上Bochs的安装和配置"></a>Linux上Bochs的安装和配置</h2><h4 id="下载Bochs最新版"><a href="#下载Bochs最新版" class="headerlink" title="下载Bochs最新版"></a>下载Bochs最新版</h4><ul>
<li><p>进入网址<a href="https://sourceforge.net/projects/bochs/files/bochs/">Bochs x86 PC emulator - Browse /bochs at SourceForge.net</a>，点击最新版进入</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101172946927.png"></p>
</li>
<li><p>选择相应的版本，此处为<code>Linux</code>平台，所以选择<code>bochs-2.7.tar.gz</code>，点击下载</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101173057682.png"></p>
</li>
<li><p>解压后使用<code>scp</code>命令上传至<code>Linux</code>平台（假设下载在<code>windows</code>平台进行）</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101173806619.png"></p>
</li>
</ul>
<h4 id="编译安装Bochs"><a href="#编译安装Bochs" class="headerlink" title="编译安装Bochs"></a>编译安装Bochs</h4><h5 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h5><ul>
<li><p>配置<code>configure</code>工具，生成<code>Makefile</code></p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell">./configure -<span class="hljs-literal">-with</span><span class="hljs-literal">-x11</span> -<span class="hljs-literal">-with</span><span class="hljs-literal">-wx</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-plugins</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-debugger</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-debugger</span><span class="hljs-literal">-gui</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-readline</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-cpp</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-idle</span><span class="hljs-literal">-hack</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-cpu</span><span class="hljs-literal">-level</span>=<span class="hljs-number">6</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-x86</span><span class="hljs-literal">-64</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-smp</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-vmx</span>=<span class="hljs-number">2</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-svm</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-avx</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-x86</span><span class="hljs-literal">-debugger</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-monitor</span><span class="hljs-literal">-mwait</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-configurable</span><span class="hljs-literal">-msrs</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-long</span><span class="hljs-literal">-phy</span><span class="hljs-literal">-address</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-repeat</span><span class="hljs-literal">-speedups</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-fast</span><span class="hljs-literal">-function</span><span class="hljs-literal">-calls</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-trace</span><span class="hljs-literal">-linking</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-ltdl</span><span class="hljs-literal">-install</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-assert</span><span class="hljs-literal">-checks</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-3dnow</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-evex</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-usb</span> -<span class="hljs-literal">-enable</span><span class="hljs-literal">-voodoo</span><br></code></pre></td></tr></table></figure></li>
<li><p>若提示缺少<code>gcc</code>、<code>cc</code>、<code>cl</code>、<code>g++</code>等则安装即可</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101175747865.png"></p>
</li>
<li><p>如提示缺少<code>configure</code>命令，则使用<code>chmod 764 configre</code>改变文件属性即可</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101175730106.png"></p>
</li>
<li><p>提示<code>The readline library was disabled because it was not found</code>，安装<code>libreadline-dev</code>即可</p>
</li>
<li><p>提示<code>handlers-chaining speedups are not supported with internal debugger or gdbstub yet</code></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101194807027.png"></p>
<p>此时参考官方文档，去除<code>--enable-handlers-chaining</code>。</p>
</li>
<li><p>提示<code>WARNING: Bochs for wxWidgets cannot be compiled here, disabling it</code></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101204906611.png"></p>
<p>此时安装<code>libwxbase3.0-dev</code>库和<code>libwxgtk3.0-gtk3-dev</code>库</p>
</li>
<li><p>提示<code>Package gdk-3.0 was not found in the pkg-config search path</code>。安装<code>libgtk-3-dev</code>库</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101221809240.png"></p>
</li>
<li><p>参考<a href="https://linux.debian.user.narkive.com/f7eEuTk8/x-windows-libraries">X windows libraries?? (narkive.com)</a></p>
</li>
</ul>
<h5 id="Make"><a href="#Make" class="headerlink" title="Make"></a>Make</h5><ul>
<li><p>执行<code>make</code>命令</p>
</li>
<li><p>找不到<code>config.h</code>头文件和<code>osdep.h</code>头文件</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101224449308.png"></p>
<p>分析可得，此时<code>bx_debug</code>文件夹内的<code>debug.h</code>文件找不到<code>config.h</code>文件和<code>osdep.h</code>文件，经查看，这两个文件都在<code>bochs-2.7</code>目录下，移入<code>bx_debug</code>目录即可或者更改<code>debug.h</code>中的路径。其他缺少的头文件可使用类似方式解决。</p>
<p><a href="https://stackoverflow.com/questions/9439744/gtk-cant-find-config-h">c - Gtk can’t find “” - Stack Overflow</a></p>
</li>
<li><p><code>make: *** 没有规则可制作目标“misc/bximage.cc”，由“misc/bximage.o” 需求。 停止</code>。出现类似问题，只需要找到文件，将其后缀由<code>cpp</code>改为<code>cc</code>。</p>
</li>
</ul>
<h5 id="make-install"><a href="#make-install" class="headerlink" title="make install"></a>make install</h5><ul>
<li>执行<code>sudo make install</code>命令即可。</li>
</ul>
<h5 id="检测安装结果"><a href="#检测安装结果" class="headerlink" title="检测安装结果"></a>检测安装结果</h5><ul>
<li><p>执行<code>bochs</code>命令，出现如下结果则表示安装成功</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220101231023841.png"></p>
</li>
</ul>
<h4 id="配置Bochs"><a href="#配置Bochs" class="headerlink" title="配置Bochs"></a>配置Bochs</h4><ul>
<li><p>为将要调试的操作系统配置虚拟硬件环境。此环境通过<code>bochsrc</code>描述，默认此文件所在目录为<code>/etc/bochs-init/</code>。当运行<code>bochs</code>时默认读取当前工作目录下的<code>bochsrc</code>文件。</p>
</li>
<li><p>配置信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> configuration file generated by Bochs</span> <br>plugin_ctrl: unmapped=1, biosdev=1, speaker=1, extfpuirq=1, parallel=1, serial=1, iodebug=1 <br>config_interface: textconfig <br>display_library: x <br>romimage: file=/usr/local/share/bochs/BIOS-bochs-latest<br>vgaromimage: file=/usr/local/share/bochs/VGABIOS-lgpl-latest<br>boot: floppy <br>floppy_bootsig_check: disabled=0 <br>floppya: type=1_44, 1_44=&quot;boot.img&quot;, status=inserted, write_protected=0 <br>ata0: enabled=1, ioaddr1=0x1f0, ioaddr2=0x3f0, irq=14 <br>ata0-master: type=none <br>ata0-slave: type=none <br>ata1: enabled=1, ioaddr1=0x170, ioaddr2=0x370, irq=15 <br>ata1-master: type=none <br>ata1-slave: type=none <br>ata2: enabled=0 <br>ata3: enabled=0 <br>pci: enabled=1, chipset=i440fx <br>vga: extension=vbe, update_freq=5 <br>cpu: count=1:1:1, ips=4000000, quantum=16, model=bx_generic, reset_on_triple_fault=1, cpuid_limit_winnt=0, ignore_bad_msrs=1, mwait_is_nop=0, msrs=&quot;msrs.def&quot;<br>cpuid: x86_64=1,level=6, mmx=1, sep=1, simd=avx512, aes=1, movbe=1, xsave=1, apic=x2apic, sha=1, movbe=1, adx=1, xsaveopt=1, avx_f16c=1, avx_fma=1, bmi=bmi2, 1g_pages=1, pcid=1, fsgsbase=1, smep=1, smap=1, mwait=1, vmx=1 <br>cpuid: family=6, model=0x1a, stepping=5, vendor_string=&quot;GenuineIntel&quot;, brand_string=&quot;Intel(R) Core(TM) i7-4770 CPU (Haswell)&quot; <br>print_timestamps: enabled=0 <br>debugger_log: - <br>magic_break: enabled=0 <br>port_e9_hack: enabled=0 <br>private_colormap: enabled=0 <br>clock: sync=none, time0=local, rtc_sync=0 <br>log: - <br>logprefix: %t%e%d <br>debug: action=ignore <br>info: action=report <br>error: action=report <br>panic: action=ask <br>keyboard: type=mf, serial_delay=250, paste_delay=100000, user_shortcut=none <br>mouse: type=ps2, enabled=0, toggle=ctrl+mbutton <br>speaker: enabled=1, mode=system <br>parport1: enabled=1, file=none <br>parport2: enabled=0 <br>com1: enabled=1, mode=null <br>com2: enabled=0 <br>com3: enabled=0 <br>com4: enabled=0 <br><br>megs: 2048<br></code></pre></td></tr></table></figure>

<p>参考官方文档<a href="https://bochs.sourceforge.io/cgi-bin/topper.pl?name=New+Bochs+Documentation&url=https://bochs.sourceforge.io/doc/docbook/user/index.html">bochs: The Open Source IA-32 Emulation Project (New Bochs Documentation) (sourceforge.io)</a></p>
</li>
<li><p>配置完成后运行<code>bochs</code>，出错及处理如下</p>
<ul>
<li><code>bochs: cannot connect to X server</code>，此时是因为本地机器不支持<code>X11</code>转发。</li>
</ul>
</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul>
<li><p>使用<code>bximage</code>制作<code>1.44MB</code>软盘</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220102121910156.png"></p>
</li>
<li><p>下载<code>Linux</code>早期版本的<code>bochs</code>镜像文件。此处选择<code>bootroot-0.11-040928.zip</code>下载，解压后如下。其中<code>bootroot-0.11</code>即为此处要用的软盘镜像文件。下载地址<a href="http://www.oldlinux.org/Linux.old/bochs-images/">Linux Bochs镜像下载</a></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220102162214775.png"></p>
</li>
<li><p>将<code>bootimage-0.11</code>写入到<code>boot.img</code>中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">dd if=bootroot-0.11 of=boot.img<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220102162330025.png"></p>
</li>
<li><p>运行<code>bochs</code>，<code>sudo bochs</code>。出现如下界面，即为正确。</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220102162527286.png"></p>
</li>
</ul>
<hr>
<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="http://www.oldlinux.org/Linux.old/bochs-images/">Linux Bochs镜像下载</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/54771795">bochs安装配置，搭建小型操作系统运行环境 - 知乎 (zhihu.com)</a></li>
<li><a href="https://stackoverflow.com/questions/34251016/floppy-read-on-floppy-image-returns-0">assembly - FLOPPY: read() on floppy image returns 0 - Stack Overflow</a></li>
<li><a href="https://sourceforge.net/projects/bochs/files/bochs/">Bochs x86 PC emulator - Browse /bochs at SourceForge.net</a></li>
<li><a href="https://linux.debian.user.narkive.com/f7eEuTk8/x-windows-libraries">X windows libraries?? (narkive.com)</a></li>
<li><a href="https://stackoverflow.com/questions/9439744/gtk-cant-find-config-h">c - Gtk can’t find “” - Stack Overflow</a></li>
<li><a href="https://bochs.sourceforge.io/cgi-bin/topper.pl?name=New+Bochs+Documentation&url=https://bochs.sourceforge.io/doc/docbook/user/index.html">bochs: The Open Source IA-32 Emulation Project (New Bochs Documentation) (sourceforge.io)</a></li>
</ul>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal获取管理员权限</title>
    <url>/2021/12/30/Windows%20terminal%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="Windows-terminal获取管理员权限"><a href="#Windows-terminal获取管理员权限" class="headerlink" title="Windows terminal获取管理员权限"></a>Windows terminal获取管理员权限</h2><h4 id="安装Scoop包管理工具"><a href="#安装Scoop包管理工具" class="headerlink" title="安装Scoop包管理工具"></a>安装Scoop包管理工具</h4><ul>
<li><p>以管理员身份进入powershell，并按照scoop文档进行安装即可<code>https://github.com/ScoopInstaller/Scoop</code></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211230170207619.png"></p>
</li>
<li><p>输入<code>scoop help</code>查看是否安装成功</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211230170343194.png" alt="image-20211230170343194"></p>
</li>
</ul>
<h4 id="安装sudo工具"><a href="#安装sudo工具" class="headerlink" title="安装sudo工具"></a>安装<code>sudo</code>工具</h4><ul>
<li><p>使用命令<code>scoop install sudo --global</code>安装</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211230171147126.png" alt="image-20211230171147126"></p>
</li>
<li><p>之后使用指令时在前边加上<code>sudo</code>即可以管理员身份运行指令</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>localStorage返回值的问题</title>
    <url>/2021/07/18/localStorage%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="localStorage返回值类型的问题"><a href="#localStorage返回值类型的问题" class="headerlink" title="localStorage返回值类型的问题"></a>localStorage返回值类型的问题</h3><h4 id="1-设置过localStorage中相应的值"><a href="#1-设置过localStorage中相应的值" class="headerlink" title="1. 设置过localStorage中相应的值"></a>1. 设置过localStorage中相应的值</h4><p>在<code>Web</code>项目中使用<code>localStorage</code>来存储数据，并在页面中进行读取后输出，代码如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> pid = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;pid&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;pid = &quot;</span>+pid);<br></code></pre></td></tr></table></figure>

<p>此时输出的结果为<code>null</code></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/1.png"></p>
<p>在其后使用如下语句，发现此时此语句内永远不会执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(pid == <span class="hljs-literal">null</span>)&#123;....&#125;<br></code></pre></td></tr></table></figure>

<p>输出此时<code>pid</code>的类型可知<code>LocalStorage.getItem()</code>返回的值的类型为<code>String</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> pid)<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/2.png"></p>
<p>则上述判断语句应该改为如下形式即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(pid == <span class="hljs-string">&#x27;null&#x27;</span>)&#123;...&#125;<br></code></pre></td></tr></table></figure>

<p>为了测试<code>localStorage.getItem()</code>的返回值类型和输入值类型是否有关，运行如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">localStorage</span>.setItem(<span class="hljs-string">&quot;pid&quot;</span>,<span class="hljs-number">1</span>);<br><span class="hljs-keyword">let</span> pid = <span class="hljs-built_in">localStorage</span>.getItem(<span class="hljs-string">&quot;pid&quot;</span>);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> pid);<br><span class="hljs-comment">//结果仍然为string</span><br></code></pre></td></tr></table></figure>

<p>经过对其他数据类型的测试，发现返回值总是传入的值转换为字符串形式之后的值。</p>
<h4 id="2-未设置过localStorage中相应的值"><a href="#2-未设置过localStorage中相应的值" class="headerlink" title="2. 未设置过localStorage中相应的值"></a>2. 未设置过localStorage中相应的值</h4><p>如果清理了浏览器的缓存或者从未使用<code>localStorage.setItem()</code>等设置过相应变量的值，则使用<code>localStorage.getItem()</code>直接获取此变量的值则会返回<code>null</code>，为<code>Object</code>类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;pid = &quot;</span>+pid);<br><span class="hljs-built_in">console</span>.log(<span class="hljs-keyword">typeof</span> pid);<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/3.png"></p>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>当在<code>localStorage</code>中存储过相应的变量的值，如<code>a</code>，则之后再使用<code>getItem(&quot;a&quot;)</code>获取值时返回的时设置值转换为字符串的形式。如果此前没有设置<code>a</code>这个值，则返回的是<code>null</code>，为<code>Object</code>类型。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>C++字符串、向量和数组</title>
    <url>/2022/01/04/C++%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%81%E5%90%91%E9%87%8F%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h2 id="C-字符串、向量和数组"><a href="#C-字符串、向量和数组" class="headerlink" title="C++字符串、向量和数组"></a>C++字符串、向量和数组</h2><h4 id="1-using声明"><a href="#1-using声明" class="headerlink" title="1. using声明"></a>1. using声明</h4><ul>
<li><p><code>using</code>声明，注意与<code>using</code>别名声明相区分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span>::name <span class="hljs-comment">//声明之后可以直接使用命名空间namespace中的name</span><br></code></pre></td></tr></table></figure></li>
<li><p>每个名字都要独立的进行<code>using</code>声明</p>
</li>
<li><p>头文件中不应包含<code>using</code>声明。以防不经意间的包含产生意想不到的错误</p>
</li>
</ul>
<h4 id="2-标准库类型string"><a href="#2-标准库类型string" class="headerlink" title="2. 标准库类型string"></a>2. 标准库类型string</h4><ul>
<li><p><code>string</code>库表示可变长字符序列，使用时首先包含<code>string</code>头文件。此库定义在<code>std</code>命名空间中。</p>
</li>
<li><p>初始化的方式</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220104162816984.png"></p>
</li>
<li><p>直接初始化和拷贝初始化</p>
<ul>
<li><p>拷贝初始化：使用等号初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">string a = <span class="hljs-string">&quot;aa&quot;</span>;<br></code></pre></td></tr></table></figure></li>
<li><p>直接初始化：不使用等号初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-function">string <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&quot;aa&quot;</span>)</span></span>;<br><span class="hljs-function">string <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;a&#x27;</span>)</span></span>;<br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>相关操作</p>
<ul>
<li><p>读写操作。读取时，开头的空白会被忽略，从第一个真正的字符开始，到下一处空白结束</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">string s;<br>cin &gt;&gt; s;<br>cout &lt;&lt; s &lt;&lt; endl;<br></code></pre></td></tr></table></figure>

<p>返回左侧的运算对象。特别是读取时，如果读取到非法字符（结束符等），则返回流无效，可以作为读取结束的判断标志实现读取未知数量的串。</p>
</li>
<li><p>读取一整行。遇到换行符就终止，换行符被读到流中，但是不会存入<code>string</code>对象。读取后返回流，同样可作为判断条件。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">string s;<br><span class="hljs-built_in">getline</span>(cin,s);			<span class="hljs-comment">//从cin中读取数据给到s</span><br></code></pre></td></tr></table></figure></li>
<li><p>判断长度操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">string s;<br>s.<span class="hljs-built_in">empty</span>();				<span class="hljs-comment">//判断是否为空，返回布尔值</span><br>s.<span class="hljs-built_in">size</span>();				<span class="hljs-comment">//返回字符个数，即长度。</span><br><span class="hljs-comment">//size()返回值是string::size_type类型，是无符号整数，注意和有符号数混用时的情况</span><br><span class="hljs-comment">//如s.size() &lt; n判断条件当n为负值时结果大概率始终为true</span><br></code></pre></td></tr></table></figure></li>
<li><p>比较操作。逐字符进行比较，且大小写敏感，依照字典顺序。</p>
<ul>
<li>一个是另一个的前缀，则短的小</li>
<li>其余则是二者第一个相异字符比较的结果</li>
</ul>
</li>
<li><p>赋值和相加操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">string s1,s2;<br>s1 = s1;			<span class="hljs-comment">//可直接赋值</span><br>string s3 = s1 + s2;		<span class="hljs-comment">//相加结果是串的拼接</span><br>string s3 += s1;<br><br><span class="hljs-comment">//string与字面值相加。字符和串字面值都可以转换为string对象</span><br>s3 = s1 + <span class="hljs-string">&quot;,&quot;</span> + s2 + <span class="hljs-string">&#x27;\n&#x27;</span>;	<span class="hljs-comment">//必须保证每个+两侧至少有一个是string对象</span><br>s4 = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&#x27;b&#x27;</span>;				<span class="hljs-comment">//错误</span><br><span class="hljs-comment">//注意</span><br>s5 = s1 + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-string">&#x27;a&#x27;</span>;		<span class="hljs-comment">//正确</span><br>s6 = <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-string">&#x27;a&#x27;</span> + s1;		<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>处理字符，使用<code>cctype</code>头文件提供的标准库进行处理，同样是在<code>std</code>空间中</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20220104171818899.png"></p>
</li>
<li><p>遍历<code>string</code>对象</p>
<ul>
<li><p>使用范围<code>for</code>语句</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> c : s)		<span class="hljs-comment">//c的类型为char，每次执行会将s中的下一个字符拷贝给c</span><br>    cout &lt;&lt; c &lt;&lt; endl;<br><span class="hljs-comment">//如果想要修改字符，则要使用引用</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;c : s)<br>    c = <span class="hljs-built_in">toupper</span>(c);<br></code></pre></td></tr></table></figure></li>
<li><p>使用下标运算符<code>[]</code>，接收参数类型为<code>string::size_type</code>，从0开始，返回该位置上字符的引用。同样注意带符号类型的转换问题。并且使用时确保对象非空，否则会产生无法预知的结果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">if</span>(index!=s.<span class="hljs-built_in">size</span>() &amp;&amp; !<span class="hljs-built_in">isspace</span>(s[index]))	<span class="hljs-comment">//注意检测条件的巧妙之处。</span><br><span class="hljs-comment">//只有索引合法时才会真正的去访问</span><br></code></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>C++容器和迭代器</title>
    <url>/2022/01/04/C++%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<h2 id="C-容器和迭代器"><a href="#C-容器和迭代器" class="headerlink" title="C++容器和迭代器"></a>C++容器和迭代器</h2><h3 id="1-容器"><a href="#1-容器" class="headerlink" title="1. 容器"></a>1. 容器</h3><h4 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h4><ul>
<li><p>容器：一些特定类型对象的集合</p>
</li>
<li><p>顺序容器：提供控制元素存储和访问顺序的能力。这种顺序与元素的值无关，只与元素加入容器的顺序相关。</p>
</li>
<li><p>标准库提供的顺序容器</p>
<table>
<thead>
<tr>
<th>容器名称</th>
<th>容器特性</th>
</tr>
</thead>
<tbody><tr>
<td><code>vector</code></td>
<td>可变大小数组。支持快速随机访问。在尾部之外的位置插入或删除元素可能很慢</td>
</tr>
<tr>
<td><code>array</code></td>
<td>固定大小数组。支持快速随机访问。不能添加或者删除元素</td>
</tr>
<tr>
<td><code>string</code></td>
<td>专门用于保存字符的可变大小数组。支持快速随机访问。在尾部插入删除速度很快</td>
</tr>
<tr>
<td><code>deque</code></td>
<td>双端队列。支持快速随机访问。在头或者尾部插入或者删除速度很快</td>
</tr>
<tr>
<td><code>list</code></td>
<td>双向链表。支持双向顺序访问。任何位置进行插入删除速度都很快</td>
</tr>
<tr>
<td><code>froward_list</code></td>
<td>单向链表。支持单向顺序访问。任何位置进行插入删除速度都很快</td>
</tr>
</tbody></table>
</li>
<li><p>注意</p>
<ul>
<li>标准库容器的性能几乎肯定与最精心优化过的同类数据结构一样好。所以建议使用标准库容器而不是原始的数据结构。</li>
<li>一般情况下推荐使用<code>vector</code>。</li>
</ul>
</li>
</ul>
<h4 id="1-2-容器通用操作"><a href="#1-2-容器通用操作" class="headerlink" title="1.2 容器通用操作"></a>1.2 容器通用操作</h4><h5 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h5><ul>
<li><p>一般来说，每个容器定义在一个头文件中，文件名与容器名相同。容器类均为模板类，使用时必须提供特定的类型来生成特定的容器。</p>
</li>
<li><p>容器保存的元素的限制</p>
<ul>
<li><p>可以保存任何类型的元素，甚至可以是另一个容器。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">vector&lt;vector&lt;string&gt;&gt;lines;<br></code></pre></td></tr></table></figure></li>
<li><p>某些容器操作对元素类型有特定要求。因此要使用这些操作时，必须提供合法的元素类型。</p>
</li>
</ul>
</li>
</ul>
<h5 id="1-2-2-容器定义和初始化"><a href="#1-2-2-容器定义和初始化" class="headerlink" title="1.2.2 容器定义和初始化"></a>1.2.2 容器定义和初始化</h5><ul>
<li><p>容器的构造函数如下</p>
<table>
<thead>
<tr>
<th>函数形式</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>C a</code></td>
<td>默认构造函数，<code>array</code>类型默认初始化，其他类型默认构造空容器</td>
</tr>
<tr>
<td><code>C a(b) ; C a = b</code></td>
<td><code>a</code>初始化为<code>b</code>的拷贝。二者必须是同类容器，且元素类型相同。对于<code>array</code>两容器的大小必须相同</td>
</tr>
<tr>
<td><code>C a&#123;x,y,z,……&#125; ; C a = &#123;x,y,z,……&#125;</code></td>
<td>初始化列表中的元素类型必须和<code>a</code>的元素类型相容。容器元素个数等于列表元素个数，<code>array</code>类型，列表中元素的数目小于等于<code>array</code>的大小</td>
</tr>
<tr>
<td><code>C a(b,e)</code></td>
<td><code>a</code>初始化为任意容器的迭代器<code>b</code>和<code>e</code>指定范围内元素的拷贝，元素类型必须相容。<code>array</code>不适用。拷贝范围<code>[b,e)</code>，新容器的大小等于此范围内的元素的个数</td>
</tr>
<tr>
<td><code>C seq(n)</code></td>
<td><code>seq</code>包含<code>n</code>个元素并进行了值初始化。<code>array</code>不适用                                                   。有默认构造函数时才能使用此方法，否则应该使用下述方法</td>
</tr>
<tr>
<td><code>C seq(n,t)</code></td>
<td><code>seq</code>包含<code>n</code>个初始化为<code>t</code>的元素。<code>array</code>不适用</td>
</tr>
</tbody></table>
</li>
<li><p><code>array</code>的定义和初始化</p>
<ul>
<li>标准库<code>array</code>的大小也是数据的一部分。定义时要指定元素的类型和容器的大小。<ul>
<li>例：<code>array&lt;int,10&gt;a</code>，定义一个元素类型是整型，长度为10的<code>array</code>类型</li>
</ul>
</li>
<li>初始化<ul>
<li>默认构造的<code>array</code>是非空的，它包含了与其大小一样多的元素。并且这些元素都被默认初始化了</li>
<li>进行默认初始化时，如果元素类型是类类型，那么必须具有默认构造函数</li>
<li><code>array</code>类型可以相互赋值，但是必须满足元素类型相同，元素个数相同。</li>
<li>因为大小是<code>array</code>类型的一部分，所以要求所有元素的类型和大小相同</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr>
<h5 id="1-2-3-容器赋值运算"><a href="#1-2-3-容器赋值运算" class="headerlink" title="1.2.3 容器赋值运算"></a>1.2.3 容器赋值运算</h5><ul>
<li><code>a = b</code><ul>
<li>将<code>a</code>中的元素替换为<code>b</code>中的元素，二者必须具有相同的类型</li>
<li>如果原有两个容器大小不等，则赋值之后二者的大小和右边容器的大小相等(<code>array</code>除外)</li>
</ul>
</li>
<li><code>a = &#123;b,c,d&#125;</code><ul>
<li>将<code>a</code>中的元素替换为列表中元素的拷贝</li>
<li>赋值运算之后，<code>a</code>的长度等于列表的长度</li>
<li><code>array</code>需满足元素类型和大小的限制</li>
</ul>
</li>
<li><code>swap(a,b)  a.swap(b)</code><ul>
<li>交换<code>a b</code>中的元素。</li>
<li><code>a b</code>必须具有相同的类型</li>
<li>一般速度比从<code>b</code>到<code>a</code>拷贝元素快的多</li>
<li>除了应用于<code>array</code>类型，交换操作不会对任何元素进行拷贝、删除或者插入操作，只是交换容器内部数据结构，因此操作可以在常数时间内完成。并且交换之后指向容器内部的迭代器、指针、引用等依然有效，仍然指向交换操作之前所指向的元素。</li>
<li>对于<code>array</code>类型，交换操作会真正交换二者的元素，所需时间与元素数目有关。并且交换之后指向容器内部的迭代器、指针、引用等依然有效，但是元素已经进行了交换。</li>
<li>对于<code>string</code>类型，交换之后会导致引用、指针、迭代器等失效。</li>
</ul>
</li>
<li><code>assign操作</code><ul>
<li>不适用于关联容器和<code>array</code></li>
<li>允许使用不同但是相容的类型给左边的容器赋值。容器类型也不用相同。赋值之后左边容器的元素的个数等于右边。</li>
<li><code>seq.assign(b,e)</code>，将<code>seq</code>中的元素替换为迭代器<code>b</code>和<code>e</code>所表示范围中的元素。两迭代器不能指向<code>seq</code></li>
<li><code>seq.assign(il)</code>，将<code>seq</code>中的元素替换为初始化列表<code>il</code>中的元素</li>
<li><code>seq.assign(n,t)</code>，将<code>seq</code>中的元素替换为<code>n</code>个值为<code>t</code>的元素</li>
</ul>
</li>
<li>注意<ul>
<li>赋值操作会导致原来指向左边容器内部的迭代器、引用和指针失效，但是<code>swap</code>操作交换容器内容不会导致此种情况</li>
</ul>
</li>
<li>参考资料<ul>
<li><a href="https://blog.csdn.net/imkelt/article/details/52213735">关于C++容器的swap操作</a></li>
</ul>
</li>
</ul>
<hr>
<h5 id="1-2-4-容器大小操作"><a href="#1-2-4-容器大小操作" class="headerlink" title="1.2.4 容器大小操作"></a>1.2.4 容器大小操作</h5><ul>
<li><code>size</code>函数<ul>
<li>成员函数</li>
<li>返回容器中元素的个数</li>
<li><code>forward_list</code>不支持</li>
</ul>
</li>
<li><code>empty</code>函数<ul>
<li>成员函数</li>
<li>判断容器是否为空，为空时，返回<code>true</code>，否则返回<code>false</code></li>
</ul>
</li>
<li><code>max_size</code>函数<ul>
<li>成员函数</li>
<li>返回一个大于或者等于该容器所能容纳的最大元素数的值。</li>
</ul>
</li>
</ul>
<hr>
<h5 id="1-2-5-容器关系运算符"><a href="#1-2-5-容器关系运算符" class="headerlink" title="1.2.5 容器关系运算符"></a>1.2.5 容器关系运算符</h5><ul>
<li>所有容器都支持<code>==</code>和<code>!=</code>运算符</li>
<li>除了无序关联容器之外所有容器都支持关系运算符<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>。</li>
<li>运算方式<ul>
<li>两个容器的比较实际上是进行元素的逐对比较。</li>
<li>如果两个容器的大小相等，并且对应位置的元素相等，则两个容器相等</li>
<li>如果两个容器的大小不等，但是较小容器中的每个元素都等于较大容器中的对应元素，则较小容器小于较大容器。</li>
<li>如果两个容器都不是另一个容器的前缀子序列，则比较结果取决于第一个不相等的元素的比较结果。</li>
</ul>
</li>
<li>注意事项<ul>
<li>要求左右两个运算对象容器类型相同并且保存的元素类型相同</li>
<li>容器的关系运算符使用元素的关系运算符进行比较，只有当元素类型定义了相应的比较运算符时，才能使用关系运算符比较两个容器。</li>
<li>容器的相等运算符使用元素的<code>==</code>运算符进行比较，容器的其他运算符使用元素的<code>&lt;</code>运算符进行比较。</li>
<li>可以使用运算符重载的方式改变容器比较的结果。</li>
</ul>
</li>
</ul>
<hr>
<h3 id="2-迭代器"><a href="#2-迭代器" class="headerlink" title="2. 迭代器"></a>2. 迭代器</h3><ul>
<li>为访问容器提供统一的接口，迭代器即为访问容器中元素的统一的接口</li>
<li>迭代器在接口上尽可能的模仿指针的行为。</li>
</ul>
<h4 id="2-1-迭代器定义和初始化"><a href="#2-1-迭代器定义和初始化" class="headerlink" title="2.1 迭代器定义和初始化"></a>2.1 迭代器定义和初始化</h4><ul>
<li><p>迭代器类型</p>
<ul>
<li>拥有迭代器的标准类型库使用<code>iterator</code>和<code>const_iterator</code>表示迭代器的类型。</li>
<li><code>iterator</code>相当于普通指针，指向的对象可读可写；<code>const_iterator</code>相当于常量指针，指向的对象只能读但是不能修改。</li>
</ul>
</li>
<li><p>迭代器定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-keyword">int</span>&gt;::iterator iter;<br><span class="hljs-comment">//容器名&lt;元素类型&gt;::迭代器类型  迭代器名;</span><br></code></pre></td></tr></table></figure></li>
<li><p>使用<code>begin</code>和<code>end</code></p>
<ul>
<li>有迭代器的容器同时拥有返回迭代器的成员方法。</li>
<li><code>begin</code>返回指向第一个元素的迭代器。</li>
<li><code>end</code>返回指向容器最后一个元素的下一位置的迭代器，称为尾后迭代器。</li>
<li>容器为空时，二者返回同一个迭代器，即为尾后迭代器。</li>
<li>如果容器元素是常量，返回<code>const_iterator</code>类型的迭代器；如果容器元素不是变量，返回<code>iterator</code>类型的迭代器。</li>
<li><code>cbegin</code>和<code>cend</code>方法，基本同<code>begin</code>和<code>end</code>。只是二者返回的一定是<code>const_iterator</code>类型的迭代器。</li>
</ul>
</li>
<li><p>迭代器初始化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-keyword">int</span>&gt;::iterator iter;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; iver;<br>iter = iver.<span class="hljs-built_in">begin</span>();<br>iter = iver.<span class="hljs-built_in">end</span>();<br>iter = iver.<span class="hljs-built_in">cbegin</span>();<br>iter = iver.<span class="hljs-built_in">cend</span>();<br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-2-迭代器通用运算"><a href="#2-2-迭代器通用运算" class="headerlink" title="2.2 迭代器通用运算"></a>2.2 迭代器通用运算</h4><ul>
<li>解引用<code>*</code><ul>
<li>通过解引用运算符，可以获取迭代器所指向的元素，<code>*iter</code>。</li>
<li>解引用运算符必须用于确实指向某个元素的迭代器，否则会出错。</li>
</ul>
</li>
<li>访问元素的成员<code>-&gt;</code><ul>
<li>使用<code>-&gt;</code>运算符可以像指针一样访问迭代器所指向元素的成员，<code>iter-&gt;a</code>，相当于<code>(*iter).a</code></li>
</ul>
</li>
<li>指向下一个元素<code>++</code><ul>
<li>使用<code>++iter</code>操作可以使得迭代器指向下一个容器元素。</li>
<li>不能对尾后迭代器使用此运算符，因为其后没有任何元素。</li>
</ul>
</li>
<li>指向上一个元素<code>--</code><ul>
<li>使用方式同<code>++</code>运算符</li>
</ul>
</li>
<li>判断是否相等<code>== !=</code><ul>
<li>用于判断两个迭代器是否相等，<code>iter1 == iter2</code>，<code>iter1 != iter2</code></li>
<li>如果两个迭代器指向同一个元素或者是同一个容器的尾后迭代器，则二者相等；反之，则不相等。</li>
</ul>
</li>
</ul>
<h4 id="2-3-迭代器额外运算"><a href="#2-3-迭代器额外运算" class="headerlink" title="2.3 迭代器额外运算"></a>2.3 迭代器额外运算</h4><ul>
<li><code>string</code>和<code>vector</code>的迭代器具有更多的运算</li>
<li><code>iter+n</code><ul>
<li>迭代器向后移动n个位置，指向新的元素或者是尾后迭代器，超出容器范围则会出错</li>
</ul>
</li>
<li><code>iter-n</code><ul>
<li>迭代器向前移动n个位置，指向新的元素或者是尾后迭代器，超出容器范围则会出错</li>
</ul>
</li>
<li><code>iter+=n</code><ul>
<li>同<code>+</code></li>
</ul>
</li>
<li><code>iter-=n</code><ul>
<li>同<code>-</code></li>
</ul>
</li>
<li><code>iter2-iter1</code><ul>
<li>二者相减得到的是二者之间的距离。即为右侧迭代器向前移动多少可以追上左侧迭代器。两个迭代器必须是同一个容器的迭代器</li>
</ul>
</li>
<li><code>&lt;,&lt;=,&gt;,&gt;=</code><ul>
<li>关系运算符，两个迭代器必须是同一个容器的迭代器</li>
</ul>
</li>
</ul>
<h4 id="2-4-迭代器失效"><a href="#2-4-迭代器失效" class="headerlink" title="2.4 迭代器失效"></a>2.4 迭代器失效</h4><hr>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
