<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++基础</title>
    <url>/2021/12/30/C++%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>测试</p>
<!--less-->

<h2 id="C-基础学习总结"><a href="#C-基础学习总结" class="headerlink" title="C++基础学习总结"></a>C++基础学习总结</h2><h4 id="1-重定向问题"><a href="#1-重定向问题" class="headerlink" title="1. 重定向问题"></a>1. 重定向问题</h4><ul>
<li><code>C++primer</code>中提到可以使用<code>&gt;</code>和<code>&lt;</code>实现文件重定向，但是实测在<code>powershell</code>中是无法使用的。但可以使用其他命令代替，具体内容可参考如下链接。</li>
<li><a href="https://www.cnblogs.com/yejiaxing-01/p/12570763.html">Windows下的重定向 - 叶家星 - 博客园 (cnblogs.com)</a></li>
<li><a href="https://blog.csdn.net/fjjaylz/article/details/86663013">(55条消息) Windows PowerShell的“管道”以及对可执行文件的文件重定向_fjjaylz的博客-CSDN博客_powershell 文件重定向</a></li>
</ul>
<h4 id="2-初始化与赋值"><a href="#2-初始化与赋值" class="headerlink" title="2. 初始化与赋值"></a>2. 初始化与赋值</h4><ul>
<li>初始化不是赋值</li>
<li>初始化是创建变量时赋予一个初始值。</li>
<li>赋值是把对象的当前值擦除，用一个新值代替。</li>
</ul>
<h4 id="3-列表初始化"><a href="#3-列表初始化" class="headerlink" title="3. 列表初始化"></a>3. 列表初始化</h4><ul>
<li><p>当列表初始化应用于内置类型，且此时存在丢失信息的风险时，编译器会报错，注意与普通的初始化过程的对比</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b&#123;a&#125;,c = &#123;a&#125;;		<span class="comment">//报错</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">d</span><span class="params">(a)</span>,e </span>= a;			<span class="comment">//正确</span></span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211231115931840.png" alt="image-20211231115931840"></p>
</li>
</ul>
<h4 id="4-默认初始化"><a href="#4-默认初始化" class="headerlink" title="4. 默认初始化"></a>4. 默认初始化</h4><ul>
<li><p>变量定义时未指定初值则会进行默认初始化。</p>
</li>
<li><p>内置类型（包括指针）</p>
<ul>
<li><p>定义于函数体外初始化为0</p>
</li>
<li><p>定义于函数体内不会初始化，为未定义，无法预知结果。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> b;</span><br><span class="line">    std::cout &lt;&lt; a &lt;&lt; std::endl;			<span class="comment">//函数外，初始化为0</span></span><br><span class="line">    std::cout &lt;&lt; b &lt;&lt; std::endl;			<span class="comment">//函数内，编译器等运行环境决定</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211231121209894.png" alt="image-20211231121209894" style="zoom:200%;" /></li>
</ul>
</li>
<li><p>类类型由类自己决定</p>
</li>
</ul>
<h4 id="5-声明与定义"><a href="#5-声明与定义" class="headerlink" title="5. 声明与定义"></a>5. 声明与定义</h4><ul>
<li><p>声明：规定变量的类型和名字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;		<span class="comment">//初始化后成为定义，且不能在函数体内初始化</span></span><br><span class="line"><span class="comment">//变量可以声明多次，但只能定义一次</span></span><br><span class="line"><span class="comment">//例</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i = <span class="number">10</span>;	<span class="comment">//定义，正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    i = <span class="number">10</span>;			<span class="comment">//错误</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义：规定变量的类型、名字，并申请存储空间，还可能赋初值。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-引用"><a href="#6-引用" class="headerlink" title="6. 引用"></a>6. 引用</h4><ul>
<li><p>引用必须初始化，且无法进行赋值，即初始化之后无法重新绑定到其他对象上。</p>
</li>
<li><p>引用不是对象，它只是对象的别名，引用的类型要和与之绑定的对象严格匹配。</p>
</li>
<li><p>引用必须绑定在对象上，不能定义引用的引用；引用不是对象，因此也没有引用的指针；指针是对象，因此有指针的引用。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> *b = &amp;a;</span><br><span class="line">    <span class="keyword">int</span> *&amp;c = b;					<span class="comment">//指针的引用，注意类型的匹配</span></span><br><span class="line">    std::cout &lt;&lt; *c &lt;&lt; std::endl;	<span class="comment">//输出10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-指针"><a href="#7-指针" class="headerlink" title="7. 指针"></a>7. 指针</h4><ul>
<li><p>指针是对象，指针的类型与它所指向的类型必须匹配。</p>
</li>
<li><p>使用字面值<code>nullptr</code>初始化指针得到空指针，<code>nullptr</code>可以转换为任何指针类型。</p>
</li>
<li><p><code>void*</code>指针可以指向任意类型的对象，不能直接操作<code>void*</code>指针指向的对象，因为无法确认对象的类型。</p>
</li>
<li><p>使用<code>*</code>，<code>&amp;</code>等定义变量时，二者只是类型修饰符，是声明符的一部分，只作用于其后所接的第一个变量名。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1024</span>,*p = &amp;i,&amp;r = i;		<span class="comment">//i为int型的数，p是int型指针，r是int型引用</span></span><br><span class="line"><span class="keyword">int</span> *p1,p2;							<span class="comment">//p1为int型指针，p2为int型变量</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-const限定符"><a href="#8-const限定符" class="headerlink" title="8. const限定符"></a>8. const限定符</h4><ul>
<li><p><code>const</code>对象一经创建就无法修改，因此必须进行初始化。</p>
</li>
<li><p>在<code>const</code>类型的对象上进行的操作不能改变其内容，否则会出错。</p>
</li>
<li><p>默认情况下，<code>const</code>对象仅在一个文件中有效，因为<code>const</code>对象在编译时会被替换为其值，编译器必须知道它的初始值，因此每个文件中都必须有其定义。并且当多个文件中出现同名的<code>const</code>变量时，等同于在不同文件中定义了独立的变量。</p>
</li>
<li><p>想要在文件之间共享<code>const</code>变量，可以使用<code>extern</code>关键字进行声明和定义</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//a.cpp中定义const变量</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufSize = <span class="built_in">fcn</span>();</span><br><span class="line"><span class="comment">//b.h头文件中声明，即可直接使用</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="keyword">int</span> bufSize;	<span class="comment">//与a.cpp中的是同一个变量</span></span><br></pre></td></tr></table></figure></li>
</ul>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>localStorage返回值的问题</title>
    <url>/2021/07/18/localStorage%E8%BF%94%E5%9B%9E%E5%80%BC%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h3 id="localStorage返回值类型的问题"><a href="#localStorage返回值类型的问题" class="headerlink" title="localStorage返回值类型的问题"></a>localStorage返回值类型的问题</h3><h4 id="1-设置过localStorage中相应的值"><a href="#1-设置过localStorage中相应的值" class="headerlink" title="1. 设置过localStorage中相应的值"></a>1. 设置过localStorage中相应的值</h4><p>在<code>Web</code>项目中使用<code>localStorage</code>来存储数据，并在页面中进行读取后输出，代码如下所示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> pid = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;pid = &quot;</span>+pid);</span><br></pre></td></tr></table></figure>

<p>此时输出的结果为<code>null</code></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/1.png"></p>
<p>在其后使用如下语句，发现此时此语句内永远不会执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pid == <span class="literal">null</span>)&#123;....&#125;</span><br></pre></td></tr></table></figure>

<p>输出此时<code>pid</code>的类型可知<code>LocalStorage.getItem()</code>返回的值的类型为<code>String</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> pid)</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/2.png"></p>
<p>则上述判断语句应该改为如下形式即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(pid == <span class="string">&#x27;null&#x27;</span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>

<p>为了测试<code>localStorage.getItem()</code>的返回值类型和输入值类型是否有关，运行如下代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">localStorage</span>.setItem(<span class="string">&quot;pid&quot;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> pid = <span class="built_in">localStorage</span>.getItem(<span class="string">&quot;pid&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> pid);</span><br><span class="line"><span class="comment">//结果仍然为string</span></span><br></pre></td></tr></table></figure>

<p>经过对其他数据类型的测试，发现返回值总是传入的值转换为字符串形式之后的值。</p>
<h4 id="2-未设置过localStorage中相应的值"><a href="#2-未设置过localStorage中相应的值" class="headerlink" title="2. 未设置过localStorage中相应的值"></a>2. 未设置过localStorage中相应的值</h4><p>如果清理了浏览器的缓存或者从未使用<code>localStorage.setItem()</code>等设置过相应变量的值，则使用<code>localStorage.getItem()</code>直接获取此变量的值则会返回<code>null</code>，为<code>Object</code>类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;pid = &quot;</span>+pid);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> pid);</span><br></pre></td></tr></table></figure>

<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/3.png"></p>
<h4 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h4><p>当在<code>localStorage</code>中存储过相应的变量的值，如<code>a</code>，则之后再使用<code>getItem(&quot;a&quot;)</code>获取值时返回的时设置值转换为字符串的形式。如果此前没有设置<code>a</code>这个值，则返回的是<code>null</code>，为<code>Object</code>类型。</p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows terminal获取管理员权限</title>
    <url>/2021/12/30/Windows%20terminal%E8%8E%B7%E5%8F%96%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="Windows-terminal获取管理员权限"><a href="#Windows-terminal获取管理员权限" class="headerlink" title="Windows terminal获取管理员权限"></a>Windows terminal获取管理员权限</h2><h4 id="安装Scoop包管理工具"><a href="#安装Scoop包管理工具" class="headerlink" title="安装Scoop包管理工具"></a>安装Scoop包管理工具</h4><ul>
<li><p>以管理员身份进入powershell，并按照scoop文档进行安装即可<code>https://github.com/ScoopInstaller/Scoop</code></p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211230170207619.png"></p>
</li>
<li><p>输入<code>scoop help</code>查看是否安装成功</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211230170343194.png" alt="image-20211230170343194"></p>
</li>
</ul>
<h4 id="安装sudo工具"><a href="#安装sudo工具" class="headerlink" title="安装sudo工具"></a>安装<code>sudo</code>工具</h4><ul>
<li><p>使用命令<code>scoop install sudo --global</code>安装</p>
<p><img src="https://gitee.com/Cautiousnut/images/raw/master/img/image-20211230171147126.png" alt="image-20211230171147126"></p>
</li>
<li><p>之后使用指令时在前边加上<code>sudo</code>即可以管理员身份运行指令</p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
</search>
